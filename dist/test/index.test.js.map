{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../test/index.test.ts"],"names":[],"mappings":";;;;;AAAA,qDAAiC;AAEjC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;IACrB,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC5B,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,EAAE,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAC9B,MAAM,CAAC,eAAS,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;QACtC,MAAM,CAAC,OAAO,eAAS,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,MAAM,MAAM,GAAG,IAAA,eAAS,EAAC,OAAO,CAAC,CAAC;QAClC,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE7C,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACnC,MAAM,MAAM,GAAG,IAAA,eAAS,EAAC,sBAAsB,CAAC,CAAC;QAEjD,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,SAAS,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,MAAM,GAAG,IAAA,eAAS,EAAC,cAAc,CAAC,CAAC;QAEzC,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACrC,MAAM,MAAM,GAAG,IAAA,eAAS,EAAC,cAAc,CAAC,CAAC;QAEzC,MAAM,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACzD,MAAM,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACnC,MAAM,MAAM,GAAG,IAAA,eAAS,EAAC,OAAO,CAAC,CAAC;QAElC,MAAM,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import dotpather from \"../index\";\r\n\r\ndescribe(\"hello\", () => {\r\n  it(\"should return true\", () => {\r\n    expect(true).toBe(true);\r\n  });\r\n});\r\n\r\ndescribe(\"dotpather\", () => {\r\n  it(\"should be a function\", () => {\r\n    expect(dotpather).not.toBeUndefined();\r\n    expect(typeof dotpather).toBe(\"function\");\r\n  });\r\n\r\n  it(\"should return value at property\", () => {\r\n    const lookup = dotpather(\"check\");\r\n    expect(lookup({ check: \"woo\" })).toBe(\"woo\");\r\n\r\n    expect(lookup({ check: { derp: true } })).toStrictEqual({ derp: true });\r\n  });\r\n\r\n  it(\"should find nested values\", () => {\r\n    const lookup = dotpather(\"check.that.attribute\");\r\n\r\n    expect(lookup({ check: { that: { attribute: 666 } } })).toBe(666);\r\n  });\r\n\r\n  it(\"should return undefined if path not found\", () => {\r\n    const lookup = dotpather(\"invalid.path\");\r\n\r\n    expect(lookup({ valid: { path: true } })).toBeUndefined();\r\n  });\r\n\r\n  it(\"should return falsey values\", () => {\r\n    const lookup = dotpather(\"falsey.value\");\r\n\r\n    expect(lookup({ falsey: { value: false } })).toBeFalsy();\r\n    expect(lookup({ falsey: { value: null } })).toBeNull();\r\n  });\r\n\r\n  it(\"should work on arrays too\", () => {\r\n    const lookup = dotpather(\"arr.1\");\r\n\r\n    expect(lookup({ arr: [44, 22] })).toBe(22);\r\n  });\r\n});"]}